#version 330 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec2 fragmentTexCoord;
in vec3 fragmentPosition;
in vec3 fragmentNormal;

out vec4 color;

uniform sampler2D imageTexture;
uniform PointLight Light;
uniform vec3 cameraPosition;

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal);

void main()
{
    vec3 temp = vec3(0.0);
    temp += calculatePointLight(Light, fragmentPosition, fragmentNormal);
    color = vec4(temp, 1.0);
}

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal)
{
    vec3 result = vec3(0.0);
    vec3 baseTexture = texture(imageTexture, fragmentTexCoord).rgb;

    //geometric data
    vec3 fragmentLight = light.position - fragmentPosition;
    float distance = length(fragmentLight);
    fragmentLight = normalize(fragmentLight);
    vec3 fragmentCamera = normalize(cameraPosition - fragmentPosition);
    vec3 halfVec = normalize(fragmentLight + fragmentCamera);

    //ambient
    result += 0.2 * baseTexture;

    //diffuse
    result += light.color * light.strength * max(0.0, dot(fragmentNormal, fragmentLight)) / (distance * distance) * baseTexture;

    //specular
    result += light.color * light.strength * pow(max(0.0, dot(fragmentNormal, halfVec)), 32) / (distance * distance);

    return result;
}